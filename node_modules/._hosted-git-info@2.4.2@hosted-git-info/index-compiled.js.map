{"version":3,"sources":["../sass-graph/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/normalize-package-data/node_modules/hosted-git-info/index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict'\nvar url = require('url')\nvar gitHosts = require('./git-host-info.js')\nvar GitHost = module.exports = require('./git-host.js')\n\nvar protocolToRepresentationMap = {\n  'git+ssh': 'sshurl',\n  'git+https': 'https',\n  'ssh': 'sshurl',\n  'git': 'git'\n}\n\nfunction protocolToRepresentation (protocol) {\n  if (protocol.substr(-1) === ':') protocol = protocol.slice(0, -1)\n  return protocolToRepresentationMap[protocol] || protocol\n}\n\nvar authProtocols = {\n  'git:': true,\n  'https:': true,\n  'git+https:': true,\n  'http:': true,\n  'git+http:': true\n}\n\nmodule.exports.fromUrl = function (giturl, opts) {\n  if (giturl == null || giturl === '') return\n  var url = fixupUnqualifiedGist(\n    isGitHubShorthand(giturl) ? 'github:' + giturl : giturl\n  )\n  var parsed = parseGitUrl(url)\n  var shortcutMatch = url.match(new RegExp('^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^/]*))[/](.+?)(?:[.]git)?($|#)'))\n  var matches = Object.keys(gitHosts).map(function (gitHostName) {\n    try {\n      var gitHostInfo = gitHosts[gitHostName]\n      var auth = null\n      if (parsed.auth && authProtocols[parsed.protocol]) {\n        auth = decodeURIComponent(parsed.auth)\n      }\n      var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null\n      var user = null\n      var project = null\n      var defaultRepresentation = null\n      if (shortcutMatch && shortcutMatch[1] === gitHostName) {\n        user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2])\n        project = decodeURIComponent(shortcutMatch[3])\n        defaultRepresentation = 'shortcut'\n      } else {\n        if (parsed.host !== gitHostInfo.domain) return\n        if (!gitHostInfo.protocols_re.test(parsed.protocol)) return\n        if (!parsed.path) return\n        var pathmatch = gitHostInfo.pathmatch\n        var matched = parsed.path.match(pathmatch)\n        if (!matched) return\n        if (matched[1] != null) user = decodeURIComponent(matched[1].replace(/^:/, ''))\n        if (matched[2] != null) project = decodeURIComponent(matched[2])\n        defaultRepresentation = protocolToRepresentation(parsed.protocol)\n      }\n      return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts)\n    } catch (ex) {\n      if (!(ex instanceof URIError)) throw ex\n    }\n  }).filter(function (gitHostInfo) { return gitHostInfo })\n  if (matches.length !== 1) return\n  return matches[0]\n}\n\nfunction isGitHubShorthand (arg) {\n  // Note: This does not fully test the git ref format.\n  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html\n  //\n  // The only way to do this properly would be to shell out to\n  // git-check-ref-format, and as this is a fast sync function,\n  // we don't want to do that.  Just let git fail if it turns\n  // out that the commit-ish is invalid.\n  // GH usernames cannot start with . or -\n  return /^[^:@%/\\s.-][^:@%/\\s]*[/][^:@\\s/%]+(?:#.*)?$/.test(arg)\n}\n\nfunction fixupUnqualifiedGist (giturl) {\n  // necessary for round-tripping gists\n  var parsed = url.parse(giturl)\n  if (parsed.protocol === 'gist:' && parsed.host && !parsed.path) {\n    return parsed.protocol + '/' + parsed.host\n  } else {\n    return giturl\n  }\n}\n\nfunction parseGitUrl (giturl) {\n  if (typeof giturl !== 'string') giturl = '' + giturl\n  var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/)\n  if (!matched) return url.parse(giturl)\n  return {\n    protocol: 'git+ssh:',\n    slashes: true,\n    auth: matched[1],\n    host: matched[2],\n    port: null,\n    hostname: matched[2],\n    hash: matched[4],\n    search: null,\n    query: null,\n    pathname: '/' + matched[3],\n    path: '/' + matched[3],\n    href: 'git+ssh://' + matched[1] + '@' + matched[2] +\n          '/' + matched[3] + (matched[4] || '')\n  }\n}\n"]}