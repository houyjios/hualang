{"version":3,"sources":["../../sass-loader/lib/importsToResolve.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,OAAO,QAAQ,MAAR,CAAb;;AAEA;AACA,IAAM,gBAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CAAtB;;AAEA;;;;;;;;AAQA,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAM,MAAM,KAAK,OAAL,CAAa,OAAb,CAAZ;AACA,QAAM,WAAW,KAAK,QAAL,CAAc,OAAd,CAAjB;AACA,QAAM,UAAU,KAAK,OAAL,CAAa,OAAb,CAAhB;AACA,QAAM,uBAAuB,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAApD;AACA,QAAM,YAAY,QAAQ,MAA1B;AACA,QAAM,aAAa,QAAQ,OAAR,IAAmB,QAAQ,OAA9C;;AAEA;AACA;AACA,QAAI,iBAAiB,QAAQ,MAAR,CAAe,CAAf,MAAsB,GAAtB,IAA6B,YAAY,GAA9D;;AAEA,QAAI,QAAQ,MAAR,CAAe,CAAf,MAAsB,GAA1B,EAA+B;AAC3B;AACA;AACA;AACA;AACA,yBAAiB,EAAE,QAAQ,OAAR,CAAgB,GAAhB,IAAuB,CAAC,CAA1B,CAAjB;AACH;;AAED,WAAQ,kBAAkB,CAAC,OAAD,CAAnB,IAAiC;AACnC,iBAAa,EADX,IACkB;AACpB,kBAAc,CAAC,OAAD,CAFZ,IAE0B;AAC7B,KAAC,uBAAuB,EAAvB,GAA4B,aAA7B,GAA4C;AACvC,OADL,CACS;AAAA,eAAO,MAAM,QAAN,GAAiB,GAAxB;AAAA,KADT,EAEK,MAFL,CAGQ,cAAc,GAAd,CAAkB;AAAA,eAAO,WAAW,GAAlB;AAAA,KAAlB,CAHR,EAIM,GAJN,CAKQ;AAAA,eAAQ,UAAU,GAAV,GAAgB,IAAxB;AAAA,KALR,CAKqC;AALrC,KAHJ;AAUH;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"importsToResolve-compiled.js","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\n// libsass uses this precedence when importing files without extension\nconst extPrecedence = [\".scss\", \".sass\", \".css\"];\n\n/**\n * When libsass tries to resolve an import, it uses a special algorithm.\n * Since the sass-loader uses webpack to resolve the modules, we need to simulate that algorithm. This function\n * returns an array of import paths to try.\n *\n * @param {string} request\n * @returns {Array<string>}\n */\nfunction importsToResolve(request) {\n    // libsass' import algorithm works like this:\n    // In case there is no file extension...\n    //   - Prefer modules starting with '_'.\n    //   - File extension precedence: .scss, .sass, .css.\n    // In case there is a file extension...\n    //   - If the file is a CSS-file, do not include it all, but just link it via @import url().\n    //   - The exact file name must match (no auto-resolving of '_'-modules).\n\n    // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n    // @see https://github.com/webpack-contrib/sass-loader/issues/167\n    const ext = path.extname(request);\n    const basename = path.basename(request);\n    const dirname = path.dirname(request);\n    const startsWithUnderscore = basename.charAt(0) === \"_\";\n    const hasCssExt = ext === \".css\";\n    const hasSassExt = ext === \".scss\" || ext === \".sass\";\n\n    // a module import is an identifier like 'bootstrap-sass'\n    // We also need to check for dirname since it might also be a deep import like 'bootstrap-sass/something'\n    let isModuleImport = request.charAt(0) !== \".\" && dirname === \".\";\n\n    if (dirname.charAt(0) === \"@\") {\n        // Check whether it is a deep import from scoped npm package\n        // (i.e. @pkg/foo/file), if so, process import as file import;\n        // otherwise, if we import from root npm scoped package (i.e. @pkg/foo)\n        // process import as a module import.\n        isModuleImport = !(dirname.indexOf(\"/\") > -1);\n    }\n\n    return (isModuleImport && [request]) || // Do not modify module imports\n        (hasCssExt && []) || // Do not import css files\n        (hasSassExt && [request]) || // Do not modify imports with explicit extensions\n        (startsWithUnderscore ? [] : extPrecedence) // Do not add underscore imports if there is already an underscore\n            .map(ext => \"_\" + basename + ext)\n            .concat(\n                extPrecedence.map(ext => basename + ext)\n            ).map(\n                file => dirname + \"/\" + file // No path.sep required here, because imports inside SASS are usually with /\n            );\n}\n\nmodule.exports = importsToResolve;\n"]}