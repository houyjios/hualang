{"version":3,"sources":["../../sass-loader/lib/normalizeOptions.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,QAAQ,QAAQ,cAAR,CAAd;AACA,IAAM,YAAY,QAAQ,YAAR,CAAlB;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,uBAAuB,QAAQ,wBAAR,CAA7B;;AAEA;;;;;;;;;;;AAWA,SAAS,gBAAT,CAA0B,aAA1B,EAAyC,OAAzC,EAAkD,eAAlD,EAAmE;AAC/D,QAAM,UAAU,UAAU,MAAM,UAAN,CAAiB,aAAjB,CAAV,KAA8C,EAA9D;AACA,QAAM,eAAe,cAAc,YAAnC;;AAEA,YAAQ,IAAR,GAAe,QAAQ,IAAR,GAAgB,QAAQ,IAAR,GAAe,GAAG,GAAlB,GAAwB,OAAxC,GAAmD,OAAlE;;AAEA;AACA,QAAI,CAAC,QAAQ,WAAT,IAAwB,cAAc,QAA1C,EAAoD;AAChD,gBAAQ,WAAR,GAAsB,YAAtB;AACH;;AAED;AACA;AACA;AACA,QAAI,QAAQ,SAAZ,EAAuB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAQ,SAAR,GAAoB,KAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,WAAzB,CAApB;AACA,YAAI,mBAAmB,OAAnB,KAA+B,KAAnC,EAA0C;AACtC,oBAAQ,aAAR,GAAwB,QAAQ,GAAR,EAAxB;AACH;AACD,YAAI,sBAAsB,OAAtB,KAAkC,KAAtC,EAA6C;AACzC;AACA;AACA,oBAAQ,gBAAR,GAA2B,IAA3B;AACH;AACD,YAAI,uBAAuB,OAAvB,KAAmC,KAAvC,EAA8C;AAC1C;AACA;AACA,oBAAQ,iBAAR,GAA4B,IAA5B;AACH;AACJ;;AAED;AACA,QAAM,MAAM,KAAK,OAAL,CAAa,YAAb,CAAZ;;AAEA;AACA,QAAI,OAAO,IAAI,WAAJ,OAAsB,OAA7B,IAAwC,oBAAoB,OAApB,KAAgC,KAA5E,EAAmF;AAC/E,gBAAQ,cAAR,GAAyB,IAAzB;AACH,KAFD,MAEO;AACH,gBAAQ,cAAR,GAAyB,QAAQ,QAAQ,cAAhB,CAAzB;AACH;;AAED;AACA,YAAQ,QAAR,GAAmB,QAAQ,QAAR,GAAmB,qBAAqB,QAAQ,QAA7B,EAAuC,YAAvC,CAAnB,GAA0E,EAA7F;AACA,YAAQ,QAAR,CAAiB,IAAjB,CAAsB,eAAtB;;AAEA;AACA,YAAQ,YAAR,GAAuB,QAAQ,YAAR,IAAwB,EAA/C;AACA,YAAQ,YAAR,CAAqB,IAArB,CAA0B,KAAK,OAAL,CAAa,YAAb,CAA1B;;AAEA,WAAO,OAAP;AACH;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"normalizeOptions-compiled.js","sourcesContent":["\"use strict\";\n\nconst os = require(\"os\");\nconst utils = require(\"loader-utils\");\nconst cloneDeep = require(\"clone-deep\");\nconst path = require(\"path\");\nconst proxyCustomImporters = require(\"./proxyCustomImporters\");\n\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * Please note: If loaderContext.query is an options object, it will be re-used across multiple invocations.\n * That's why we must not modify the object directly.\n *\n * @param {LoaderContext} loaderContext\n * @param {string} content\n * @param {Function} webpackImporter\n * @returns {Object}\n */\nfunction normalizeOptions(loaderContext, content, webpackImporter) {\n    const options = cloneDeep(utils.getOptions(loaderContext)) || {};\n    const resourcePath = loaderContext.resourcePath;\n\n    options.data = options.data ? (options.data + os.EOL + content) : content;\n\n    // opt.outputStyle\n    if (!options.outputStyle && loaderContext.minimize) {\n        options.outputStyle = \"compressed\";\n    }\n\n    // opt.sourceMap\n    // Not using the `this.sourceMap` flag because css source maps are different\n    // @see https://github.com/webpack/css-loader/pull/40\n    if (options.sourceMap) {\n        // Deliberately overriding the sourceMap option here.\n        // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n        // In case it is a string, options.sourceMap should be a path where the source map is written.\n        // But since we're using the data option, the source map will not actually be written, but\n        // all paths in sourceMap.sources will be relative to that path.\n        // Pretty complicated... :(\n        options.sourceMap = path.join(process.cwd(), \"/sass.map\");\n        if (\"sourceMapRoot\" in options === false) {\n            options.sourceMapRoot = process.cwd();\n        }\n        if (\"omitSourceMapUrl\" in options === false) {\n            // The source map url doesn't make sense because we don't know the output path\n            // The css-loader will handle that for us\n            options.omitSourceMapUrl = true;\n        }\n        if (\"sourceMapContents\" in options === false) {\n            // If sourceMapContents option is not set, set it to true otherwise maps will be empty/null\n            // when exported by webpack-extract-text-plugin.\n            options.sourceMapContents = true;\n        }\n    }\n\n    // indentedSyntax is a boolean flag.\n    const ext = path.extname(resourcePath);\n\n    // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n    if (ext && ext.toLowerCase() === \".sass\" && \"indentedSyntax\" in options === false) {\n        options.indentedSyntax = true;\n    } else {\n        options.indentedSyntax = Boolean(options.indentedSyntax);\n    }\n\n    // Allow passing custom importers to `node-sass`. Accepts `Function` or an array of `Function`s.\n    options.importer = options.importer ? proxyCustomImporters(options.importer, resourcePath) : [];\n    options.importer.push(webpackImporter);\n\n    // `node-sass` uses `includePaths` to resolve `@import` paths. Append the currently processed file.\n    options.includePaths = options.includePaths || [];\n    options.includePaths.push(path.dirname(resourcePath));\n\n    return options;\n}\n\nmodule.exports = normalizeOptions;\n"]}