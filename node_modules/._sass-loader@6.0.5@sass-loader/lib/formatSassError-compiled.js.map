{"version":3,"sources":["../../sass-loader/lib/formatSassError.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;;AAEA;AACA,IAAM,YAAY,EAAE;AAChB,aAAS,uBADK;AAEd,YAAQ,EAFM;AAGd,UAAM,CAHQ;AAId,UAAM,OAJQ;AAKd,YAAQ;AALM,CAAlB;;AAQA;;;;;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,YAA9B,EAA4C;AACxC;AACA;AACA,QAAI,SAAJ,GAAgB,IAAhB;;AAEA;AACA;AACA,QAAI,CAAC,IAAI,IAAT,EAAe;AACX;AACH;;AAED,QAAI,MAAM,IAAI,OAAd;;AAEA,QAAI,IAAI,IAAJ,KAAa,OAAjB,EAA0B;AACtB,YAAI,IAAJ,GAAW,YAAX;AACH;AACD;AACA,QAAI,IAAJ,GAAW,KAAK,SAAL,CAAe,IAAI,IAAnB,CAAX;;AAEA;AACA;AACA,UAAM,IAAI,OAAJ,CAAY,oBAAZ,EAAkC,EAAlC,CAAN;;AAEA,QAAI,OAAJ,GAAc,yBAAyB,GAAzB,IACV,IAAI,MAAJ,CAAW,CAAX,EAAc,WAAd,EADU,GACoB,IAAI,KAAJ,CAAU,CAAV,CADpB,GACmC,GAAG,GADtC,GAEV,WAFU,GAEI,IAAI,IAFR,GAEe,SAFf,GAE2B,IAAI,IAF/B,GAEsC,WAFtC,GAEoD,IAAI,MAFxD,GAEiE,GAF/E;AAGH;;AAED;;;;;;;;;AASA,SAAS,wBAAT,CAAkC,GAAlC,EAAuC;AACnC,QAAI;AACA,YAAM,UAAU,GAAG,YAAH,CAAgB,IAAI,IAApB,EAA0B,MAA1B,CAAhB;;AAEA,eAAO,GAAG,GAAH,GACH,QAAQ,KAAR,CAAc,GAAG,GAAjB,EAAsB,IAAI,IAAJ,GAAW,CAAjC,CADG,GACmC,GAAG,GADtC,GAEH,IAAI,KAAJ,CAAU,KAAK,GAAL,CAAS,IAAI,MAAJ,GAAa,CAAtB,EAAyB,CAAzB,CAAV,EAAuC,IAAvC,CAA4C,GAA5C,CAFG,GAEgD,GAFhD,GAEsD,GAAG,GAFzD,GAGH,QAHJ;AAIH,KAPD,CAOE,OAAO,GAAP,EAAY;AACV;AACA,eAAO,EAAP;AACH;AACJ;;AAED,OAAO,OAAP,GAAiB,eAAjB","file":"formatSassError-compiled.js","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst fs = require(\"fs\");\n\n// A typical sass error looks like this\nconst SassError = { // eslint-disable-line no-unused-vars\n    message: \"invalid property name\",\n    column: 14,\n    line: 1,\n    file: \"stdin\",\n    status: 1\n};\n\n/**\n * Enhances the sass error with additional information about what actually went wrong.\n *\n * @param {SassError} err\n * @param {string} resourcePath\n */\nfunction formatSassError(err, resourcePath) {\n    // Instruct webpack to hide the JS stack from the console\n    // Usually you're only interested in the SASS stack in this case.\n    err.hideStack = true;\n\n    // The file property is missing in rare cases.\n    // No improvement in the error is possible.\n    if (!err.file) {\n        return;\n    }\n\n    let msg = err.message;\n\n    if (err.file === \"stdin\") {\n        err.file = resourcePath;\n    }\n    // node-sass returns UNIX-style paths\n    err.file = path.normalize(err.file);\n\n    // The 'Current dir' hint of node-sass does not help us, we're providing\n    // additional information by reading the err.file property\n    msg = msg.replace(/\\s*Current dir:\\s*/, \"\");\n\n    err.message = getFileExcerptIfPossible(err) +\n        msg.charAt(0).toUpperCase() + msg.slice(1) + os.EOL +\n        \"      in \" + err.file + \" (line \" + err.line + \", column \" + err.column + \")\";\n}\n\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {SassError} err\n * @returns {string}\n */\nfunction getFileExcerptIfPossible(err) {\n    try {\n        const content = fs.readFileSync(err.file, \"utf8\");\n\n        return os.EOL +\n            content.split(os.EOL)[err.line - 1] + os.EOL +\n            new Array(Math.max(err.column - 1, 0)).join(\" \") + \"^\" + os.EOL +\n            \"      \";\n    } catch (err) {\n        // If anything goes wrong here, we don't want any errors to be reported to the user\n        return \"\";\n    }\n}\n\nmodule.exports = formatSassError;\n"]}