{"version":3,"sources":["../../sass-loader/lib/loader.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,OAAO,QAAQ,WAAR,CAAb;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,OAAR,CAAd;AACA,IAAM,kBAAkB,QAAQ,mBAAR,CAAxB;AACA,IAAM,kBAAkB,QAAQ,mBAAR,CAAxB;AACA,IAAM,mBAAmB,QAAQ,oBAAR,CAAzB;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;;AAEA;AACA;AACA;AACA,IAAM,iBAAiB,QAAQ,GAAR,CAAY,kBAAZ,IAAkC,CAAzD;AACA,IAAM,oBAAoB,MAAM,KAAN,CAAY,KAAK,MAAjB,EAAyB,iBAAiB,CAA1C,CAA1B;;AAEA;;;;;;AAMA,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAAA;;AACzB,QAAM,WAAW,KAAK,KAAL,EAAjB;AACA,QAAM,SAAS,OAAO,QAAP,KAAoB,UAAnC;AACA,QAAM,OAAO,IAAb;AACA,QAAM,eAAe,KAAK,YAA1B;;AAEA,aAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACnC;AACA,aAAK,UAAL,CAAgB,KAAK,SAAL,CAAe,IAAf,CAAhB;AACH;;AAED,QAAI,MAAJ,EAAY;AACR,cAAM,IAAI,KAAJ,CAAU,iHAAV,CAAN;AACH;;AAED,SAAK,SAAL;;AAEA,QAAM,UAAU,iBAAiB,IAAjB,EAAuB,OAAvB,EAAgC,gBAC5C,YAD4C,EAE5C,KAAK,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAL,CAF4C,EAG5C,uBAH4C,CAAhC,CAAhB;;AAMA;AACA,QAAI,QAAQ,IAAR,CAAa,IAAb,OAAwB,EAA5B,EAAgC;AAC5B,iBAAS,IAAT,EAAe,EAAf;AACA;AACH;;AAED;AACA,sBAAkB,IAAlB,CAAuB,OAAvB,EAAgC,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC7C,YAAI,GAAJ,EAAS;AACL,4BAAgB,GAAhB,EAAqB,MAAK,YAA1B;AACA,gBAAI,IAAJ,IAAY,MAAK,UAAL,CAAgB,IAAI,IAApB,CAAZ;AACA,qBAAS,GAAT;AACA;AACH;;AAED,YAAI,OAAO,GAAP,IAAc,OAAO,GAAP,KAAe,IAAjC,EAAuC;AACnC,mBAAO,GAAP,GAAa,KAAK,KAAL,CAAW,OAAO,GAAlB,CAAb;AACA;AACA;AACA,mBAAO,OAAO,GAAP,CAAW,IAAlB;AACA;AACA;AACA;AACA;AACA,mBAAO,GAAP,CAAW,OAAX,CAAmB,CAAnB,IAAwB,KAAK,QAAL,CAAc,QAAQ,GAAR,EAAd,EAA6B,YAA7B,CAAxB;AACA;AACA;AACA;AACA,mBAAO,GAAP,CAAW,UAAX,GAAwB,KAAK,SAAL,CAAe,OAAO,GAAP,CAAW,UAA1B,CAAxB;AACA,mBAAO,GAAP,CAAW,OAAX,GAAqB,OAAO,GAAP,CAAW,OAAX,CAAmB,GAAnB,CAAuB,KAAK,SAA5B,CAArB;AACH,SAfD,MAeO;AACH,mBAAO,GAAP,GAAa,IAAb;AACH;;AAED,eAAO,KAAP,CAAa,aAAb,CAA2B,OAA3B,CAAmC,uBAAnC;AACA,iBAAS,IAAT,EAAe,OAAO,GAAP,CAAW,QAAX,EAAf,EAAsC,OAAO,GAA7C;AACH,KA7BD;AA8BH;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"loader-compiled.js","sourcesContent":["\"use strict\";\n\nconst sass = require(\"node-sass\");\nconst path = require(\"path\");\nconst async = require(\"async\");\nconst formatSassError = require(\"./formatSassError\");\nconst webpackImporter = require(\"./webpackImporter\");\nconst normalizeOptions = require(\"./normalizeOptions\");\nconst pify = require(\"pify\");\n\n// This queue makes sure node-sass leaves one thread available for executing\n// fs tasks when running the custom importer code.\n// This can be removed as soon as node-sass implements a fix for this.\nconst threadPoolSize = process.env.UV_THREADPOOL_SIZE || 4;\nconst asyncSassJobQueue = async.queue(sass.render, threadPoolSize - 1);\n\n/**\n * The sass-loader makes node-sass available to webpack modules.\n *\n * @this {LoaderContext}\n * @param {string} content\n */\nfunction sassLoader(content) {\n    const callback = this.async();\n    const isSync = typeof callback !== \"function\";\n    const self = this;\n    const resourcePath = this.resourcePath;\n\n    function addNormalizedDependency(file) {\n        // node-sass returns POSIX paths\n        self.dependency(path.normalize(file));\n    }\n\n    if (isSync) {\n        throw new Error(\"Synchronous compilation is not supported anymore. See https://github.com/webpack-contrib/sass-loader/issues/333\");\n    }\n\n    this.cacheable();\n\n    const options = normalizeOptions(this, content, webpackImporter(\n        resourcePath,\n        pify(this.resolve.bind(this)),\n        addNormalizedDependency\n    ));\n\n    // Skip empty files, otherwise it will stop webpack, see issue #21\n    if (options.data.trim() === \"\") {\n        callback(null, \"\");\n        return;\n    }\n\n    // start the actual rendering\n    asyncSassJobQueue.push(options, (err, result) => {\n        if (err) {\n            formatSassError(err, this.resourcePath);\n            err.file && this.dependency(err.file);\n            callback(err);\n            return;\n        }\n\n        if (result.map && result.map !== \"{}\") {\n            result.map = JSON.parse(result.map);\n            // result.map.file is an optional property that provides the output filename.\n            // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n            delete result.map.file;\n            // The first source is 'stdin' according to node-sass because we've used the data input.\n            // Now let's override that value with the correct relative path.\n            // Since we specified options.sourceMap = path.join(process.cwd(), \"/sass.map\"); in normalizeOptions,\n            // we know that this path is relative to process.cwd(). This is how node-sass works.\n            result.map.sources[0] = path.relative(process.cwd(), resourcePath);\n            // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n            // This fixes an error on windows where the source-map module cannot resolve the source maps.\n            // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n            result.map.sourceRoot = path.normalize(result.map.sourceRoot);\n            result.map.sources = result.map.sources.map(path.normalize);\n        } else {\n            result.map = null;\n        }\n\n        result.stats.includedFiles.forEach(addNormalizedDependency);\n        callback(null, result.css.toString(), result.map);\n    });\n}\n\nmodule.exports = sassLoader;\n"]}