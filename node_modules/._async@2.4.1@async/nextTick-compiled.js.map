{"version":3,"sources":["../sass-loader/node_modules/async/nextTick.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;;AAIA,IAAI,gBAAgB,QAAQ,yBAAR,CAApB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAI,MAAJ;;AAEA,IAAI,cAAc,WAAlB,EAA+B;AAC3B,aAAS,QAAQ,QAAjB;AACH,CAFD,MAEO,IAAI,cAAc,eAAlB,EAAmC;AACtC,aAAS,YAAT;AACH,CAFM,MAEA;AACH,aAAS,cAAc,QAAvB;AACH;;AAED,QAAQ,OAAR,GAAkB,CAAC,GAAG,cAAc,IAAlB,EAAwB,MAAxB,CAAlB;AACA,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"nextTick-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _setImmediate = require('./internal/setImmediate');\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `setImmediate`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @alias setImmediate\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer;\n\nif (_setImmediate.hasNextTick) {\n    _defer = process.nextTick;\n} else if (_setImmediate.hasSetImmediate) {\n    _defer = setImmediate;\n} else {\n    _defer = _setImmediate.fallback;\n}\n\nexports.default = (0, _setImmediate.wrap)(_defer);\nmodule.exports = exports['default'];"]}