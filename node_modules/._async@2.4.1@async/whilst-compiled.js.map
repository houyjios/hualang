{"version":3,"sources":["../sass-loader/node_modules/async/whilst.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;AAGA,QAAQ,OAAR,GAAkB,MAAlB;;AAEA,IAAI,QAAQ,QAAQ,aAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,IAAI,SAAS,QAAQ,kBAAR,CAAb;;AAEA,IAAI,UAAU,uBAAuB,MAAvB,CAAd;;AAEA,IAAI,YAAY,QAAQ,qBAAR,CAAhB;;AAEA,IAAI,aAAa,uBAAuB,SAAvB,CAAjB;;AAEA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;;AAEA,IAAI,cAAc,uBAAuB,UAAvB,CAAlB;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,QAAtB,EAAgC,QAAhC,EAA0C;AACtC,eAAW,CAAC,GAAG,WAAW,OAAf,EAAwB,YAAY,OAAO,OAA3C,CAAX;AACA,QAAI,YAAY,CAAC,GAAG,YAAY,OAAhB,EAAyB,QAAzB,CAAhB;AACA,QAAI,CAAC,MAAL,EAAa,OAAO,SAAS,IAAT,CAAP;AACb,QAAI,OAAO,SAAP,IAAO,CAAU,GAAV,CAAc,aAAd,EAA6B;AACpC,YAAI,GAAJ,EAAS,OAAO,SAAS,GAAT,CAAP;AACT,YAAI,MAAJ,EAAY,OAAO,UAAU,IAAV,CAAP;AACZ,YAAI,OAAO,CAAC,GAAG,QAAQ,OAAZ,EAAqB,SAArB,EAAgC,CAAhC,CAAX;AACA,iBAAS,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAO,MAAP,CAAc,IAAd,CAArB;AACH,KALD;AAMA,cAAU,IAAV;AACH;AACD,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"whilst-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = whilst;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = (0, _onlyOnce2.default)(callback || _noop2.default);\n    var _iteratee = (0, _wrapAsync2.default)(iteratee);\n    if (!test()) return callback(null);\n    var next = function (err /*, ...args*/) {\n        if (err) return callback(err);\n        if (test()) return _iteratee(next);\n        var args = (0, _slice2.default)(arguments, 1);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\nmodule.exports = exports['default'];"]}