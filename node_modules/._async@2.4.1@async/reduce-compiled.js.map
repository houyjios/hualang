{"version":3,"sources":["../sass-loader/node_modules/async/reduce.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;AAGA,QAAQ,OAAR,GAAkB,MAAlB;;AAEA,IAAI,gBAAgB,QAAQ,gBAAR,CAApB;;AAEA,IAAI,iBAAiB,uBAAuB,aAAvB,CAArB;;AAEA,IAAI,QAAQ,QAAQ,aAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,IAAI,QAAQ,QAAQ,iBAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;;AAEA,IAAI,cAAc,uBAAuB,UAAvB,CAAlB;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,QAA5B,EAAsC,QAAtC,EAAgD;AAC5C,eAAW,CAAC,GAAG,OAAO,OAAX,EAAoB,YAAY,OAAO,OAAvC,CAAX;AACA,QAAI,YAAY,CAAC,GAAG,YAAY,OAAhB,EAAyB,QAAzB,CAAhB;AACA,KAAC,GAAG,eAAe,OAAnB,EAA4B,IAA5B,EAAkC,UAAU,CAAV,EAAa,CAAb,EAAgB,QAAhB,EAA0B;AACxD,kBAAU,IAAV,EAAgB,CAAhB,EAAmB,UAAU,GAAV,EAAe,CAAf,EAAkB;AACjC,mBAAO,CAAP;AACA,qBAAS,GAAT;AACH,SAHD;AAIH,KALD,EAKG,UAAU,GAAV,EAAe;AACd,iBAAS,GAAT,EAAc,IAAd;AACH,KAPD;AAQH;AACD,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"reduce-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reduce;\n\nvar _eachOfSeries = require('./eachOfSeries');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    var _iteratee = (0, _wrapAsync2.default)(iteratee);\n    (0, _eachOfSeries2.default)(coll, function (x, i, callback) {\n        _iteratee(memo, x, function (err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, memo);\n    });\n}\nmodule.exports = exports['default'];"]}