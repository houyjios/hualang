{"version":3,"sources":["../sass-loader/node_modules/async/apply.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;;AAIA,QAAQ,OAAR,GAAkB,UAAU,EAAV,CAAa,aAAb,EAA4B;AAC1C,QAAI,OAAO,CAAC,GAAG,QAAQ,OAAZ,EAAqB,SAArB,EAAgC,CAAhC,CAAX;AACA,WAAO,YAAY,YAAY;AAC3B,YAAI,WAAW,CAAC,GAAG,QAAQ,OAAZ,EAAqB,SAArB,CAAf;AACA,eAAO,GAAG,KAAH,CAAS,IAAT,EAAe,KAAK,MAAL,CAAY,QAAZ,CAAf,CAAP;AACH,KAHD;AAIH,CAND;;AAQA,IAAI,SAAS,QAAQ,kBAAR,CAAb;;AAEA,IAAI,UAAU,uBAAuB,MAAvB,CAAd;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"apply-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (fn /*, ...args*/) {\n    var args = (0, _slice2.default)(arguments, 1);\n    return function () /*callArgs*/{\n        var callArgs = (0, _slice2.default)(arguments);\n        return fn.apply(null, args.concat(callArgs));\n    };\n};\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n;\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nmodule.exports = exports['default'];"]}