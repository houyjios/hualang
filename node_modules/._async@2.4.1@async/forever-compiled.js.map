{"version":3,"sources":["../sass-loader/node_modules/async/forever.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;AAGA,QAAQ,OAAR,GAAkB,OAAlB;;AAEA,IAAI,QAAQ,QAAQ,aAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,IAAI,YAAY,QAAQ,qBAAR,CAAhB;;AAEA,IAAI,aAAa,uBAAuB,SAAvB,CAAjB;;AAEA,IAAI,eAAe,QAAQ,eAAR,CAAnB;;AAEA,IAAI,gBAAgB,uBAAuB,YAAvB,CAApB;;AAEA,IAAI,aAAa,QAAQ,sBAAR,CAAjB;;AAEA,IAAI,cAAc,uBAAuB,UAAvB,CAAlB;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,OAAT,CAAiB,EAAjB,EAAqB,OAArB,EAA8B;AAC1B,QAAI,OAAO,CAAC,GAAG,WAAW,OAAf,EAAwB,WAAW,OAAO,OAA1C,CAAX;AACA,QAAI,OAAO,CAAC,GAAG,YAAY,OAAhB,EAAyB,CAAC,GAAG,cAAc,OAAlB,EAA2B,EAA3B,CAAzB,CAAX;;AAEA,aAAS,IAAT,CAAc,GAAd,EAAmB;AACf,YAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;AACT,aAAK,IAAL;AACH;AACD;AACH;AACD,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"forever-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = forever;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _ensureAsync = require('./ensureAsync');\n\nvar _ensureAsync2 = _interopRequireDefault(_ensureAsync);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = (0, _onlyOnce2.default)(errback || _noop2.default);\n    var task = (0, _wrapAsync2.default)((0, _ensureAsync2.default)(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\nmodule.exports = exports['default'];"]}