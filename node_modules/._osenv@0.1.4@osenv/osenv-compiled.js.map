{"version":3,"sources":["osenv.js"],"names":[],"mappings":";;AAAA,IAAI,YAAY,QAAQ,QAAR,KAAqB,OAArC;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,eAAR,EAAyB,IAApC;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,YAAY,QAAQ,YAAR,CAAhB;;AAEA;AACA;AACA;AACA;AACA,SAAS,IAAT,CAAe,GAAf,EAAoB,MAApB,EAA4B,QAA5B,EAAsC;AACpC,MAAI,OAAO,KAAX;AACA,MAAI,UAAU,KAAd;AACA,UAAQ,GAAR,IAAe,UAAU,EAAV,EAAc;AAC3B,QAAI,MAAM,QAAV;AACA,QAAI,CAAC,GAAD,IAAQ,CAAC,IAAT,IAAiB,CAAC,OAAlB,IAA6B,QAAjC,EAA2C;AACzC,aAAO,IAAP;AACA,gBAAU,IAAV;AACA,WAAK,QAAL,EAAe,UAAU,EAAV,EAAc,MAAd,EAAsB,MAAtB,EAA8B;AAC3C,kBAAU,KAAV;AACA,YAAI,EAAJ,EAAQ,OAFmC,CAE5B;AACf,cAAM,OAAO,IAAP,EAAN;AACD,OAJD;AAKD;AACD,YAAQ,GAAR,IAAe,UAAU,EAAV,EAAc;AAC3B,UAAI,EAAJ,EAAQ,QAAQ,QAAR,CAAiB,GAAG,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,GAApB,CAAjB;AACR,aAAO,GAAP;AACD,KAHD;AAIA,QAAI,MAAM,CAAC,OAAX,EAAoB,QAAQ,QAAR,CAAiB,GAAG,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,GAApB,CAAjB;AACpB,WAAO,GAAP;AACD,GAjBD;AAkBD;;AAED,KAAK,MAAL,EAAa,YAAY;AACvB,SAAS,YACA,QAAQ,GAAR,CAAY,UAAZ,GAAyB,IAAzB,GAAgC,QAAQ,GAAR,CAAY,QAD5C,GAEA,QAAQ,GAAR,CAAY,IAFrB;AAID,CALD,EAKG,QALH;;AAOA,KAAK,QAAL,EAAe,YAAY;AACzB,SAAO,YAAY,QAAQ,GAAR,CAAY,MAAxB,GAAiC,QAAQ,GAAR,CAAY,GAApD;AACD,CAFD;;AAIA,KAAK,UAAL,EAAiB,YAAY;AAC3B,SAAO,YAAY,QAAQ,GAAR,CAAY,YAAxB,GAAuC,QAAQ,GAAR,CAAY,QAA1D;AACD,CAFD,EAEG,UAFH;;AAIA,KAAK,QAAL,EAAe,YAAY;AACzB,SAAO,UAAP;AACD,CAFD;;AAIA,KAAK,MAAL,EAAa,YAAY;AACvB,SAAO,WAAP;AACD,CAFD;;AAIA,KAAK,MAAL,EAAa,YAAY;AACvB,SAAO,CAAC,QAAQ,GAAR,CAAY,IAAZ,IACA,QAAQ,GAAR,CAAY,IADZ,IAEA,QAAQ,GAAR,CAAY,IAFb,EAEmB,KAFnB,CAEyB,YAAY,GAAZ,GAAkB,GAF3C,CAAP;AAGD,CAJD;;AAMA,KAAK,QAAL,EAAe,YAAY;AACzB,SAAO,QAAQ,GAAR,CAAY,MAAZ,IACA,QAAQ,GAAR,CAAY,MADZ,KAEC,YAAY,aAAZ,GAA4B,IAF7B,CAAP;AAGD,CAJD;;AAMA,KAAK,OAAL,EAAc,YAAY;AACxB,SAAO,YAAY,QAAQ,GAAR,CAAY,OAAZ,IAAuB,KAAnC,GACE,QAAQ,GAAR,CAAY,KAAZ,IAAqB,MAD9B;AAED,CAHD","file":"osenv-compiled.js","sourcesContent":["var isWindows = process.platform === 'win32'\nvar path = require('path')\nvar exec = require('child_process').exec\nvar osTmpdir = require('os-tmpdir')\nvar osHomedir = require('os-homedir')\n\n// looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\nfunction memo (key, lookup, fallback) {\n  var fell = false\n  var falling = false\n  exports[key] = function (cb) {\n    var val = lookup()\n    if (!val && !fell && !falling && fallback) {\n      fell = true\n      falling = true\n      exec(fallback, function (er, output, stderr) {\n        falling = false\n        if (er) return // oh well, we tried\n        val = output.trim()\n      })\n    }\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val))\n      return val\n    }\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val))\n    return val\n  }\n}\n\nmemo('user', function () {\n  return ( isWindows\n         ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME\n         : process.env.USER\n         )\n}, 'whoami')\n\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1\n})\n\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME\n}, 'hostname')\n\nmemo('tmpdir', function () {\n  return osTmpdir()\n})\n\nmemo('home', function () {\n  return osHomedir()\n})\n\nmemo('path', function () {\n  return (process.env.PATH ||\n          process.env.Path ||\n          process.env.path).split(isWindows ? ';' : ':')\n})\n\nmemo('editor', function () {\n  return process.env.EDITOR ||\n         process.env.VISUAL ||\n         (isWindows ? 'notepad.exe' : 'vi')\n})\n\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd'\n         : process.env.SHELL || 'bash'\n})\n"]}