{"version":3,"sources":["../sass-graph/node_modules/yargs/node_modules/require-directory/index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('fs'),\n  join = require('path').join,\n  resolve = require('path').resolve,\n  dirname = require('path').dirname,\n  defaultOptions = {\n    extensions: ['js', 'json', 'coffee'],\n    recurse: true,\n    rename: function (name) {\n      return name;\n    },\n    visit: function (obj) {\n      return obj;\n    }\n  };\n\nfunction checkFileInclusion(path, filename, options) {\n  return (\n    // verify file has valid extension\n    (new RegExp('\\\\.(' + options.extensions.join('|') + ')$', 'i').test(filename)) &&\n\n    // if options.include is a RegExp, evaluate it and make sure the path passes\n    !(options.include && options.include instanceof RegExp && !options.include.test(path)) &&\n\n    // if options.include is a function, evaluate it and make sure the path passes\n    !(options.include && typeof options.include === 'function' && !options.include(path, filename)) &&\n\n    // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass\n    !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) &&\n\n    // if options.exclude is a function, evaluate it and make sure the path doesn't pass\n    !(options.exclude && typeof options.exclude === 'function' && options.exclude(path, filename))\n  );\n}\n\nfunction requireDirectory(m, path, options) {\n  var retval = {};\n\n  // path is optional\n  if (path && !options && typeof path !== 'string') {\n    options = path;\n    path = null;\n  }\n\n  // default options\n  options = options || {};\n  for (var prop in defaultOptions) {\n    if (typeof options[prop] === 'undefined') {\n      options[prop] = defaultOptions[prop];\n    }\n  }\n\n  // if no path was passed in, assume the equivelant of __dirname from caller\n  // otherwise, resolve path relative to the equivalent of __dirname\n  path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);\n\n  // get the path of each file in specified directory, append to current tree node, recurse\n  fs.readdirSync(path).forEach(function (filename) {\n    var joined = join(path, filename),\n      files,\n      key,\n      obj;\n\n    if (fs.statSync(joined).isDirectory() && options.recurse) {\n      // this node is a directory; recurse\n      files = requireDirectory(m, joined, options);\n      // exclude empty directories\n      if (Object.keys(files).length) {\n        retval[options.rename(filename, joined, filename)] = files;\n      }\n    } else {\n      if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {\n        // hash node key shouldn't include file extension\n        key = filename.substring(0, filename.lastIndexOf('.'));\n        obj = m.require(joined);\n        retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;\n      }\n    }\n  });\n\n  return retval;\n}\n\nmodule.exports = requireDirectory;\nmodule.exports.defaults = defaultOptions;\n"]}