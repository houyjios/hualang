{"version":3,"sources":["../../sass-graph/node_modules/yargs/lib/completion.js"],"names":[],"mappings":"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","file":"completion-compiled.js","sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = command.getCommandHandlers()\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder\n        if (typeof builder === 'function') {\n          const y = yargs.reset()\n          builder(y)\n          return y.argv\n        }\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || [])\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1\n        })\n        if (notInArgs) {\n          completions.push('--' + key)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]}