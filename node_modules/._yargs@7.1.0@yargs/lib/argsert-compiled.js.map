{"version":3,"sources":["../../sass-graph/node_modules/yargs/lib/argsert.js"],"names":[],"mappings":"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","file":"argsert-compiled.js","sourcesContent":["const command = require('./command')()\nconst YError = require('./yerror')\n\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']\n\nmodule.exports = function (expected, callerArguments, length) {\n  // TODO: should this eventually raise an exception.\n  try {\n    // preface the argument description with \"cmd\", so\n    // that we can run it through yargs' command parser.\n    var position = 0\n    var parsed = {demanded: [], optional: []}\n    if (typeof expected === 'object') {\n      length = callerArguments\n      callerArguments = expected\n    } else {\n      parsed = command.parseCommand('cmd ' + expected)\n    }\n    const args = [].slice.call(callerArguments)\n\n    while (args.length && args[args.length - 1] === undefined) args.pop()\n    length = length || args.length\n\n    if (length < parsed.demanded.length) {\n      throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length +\n        ' but received ' + args.length + '.')\n    }\n\n    const totalCommands = parsed.demanded.length + parsed.optional.length\n    if (length > totalCommands) {\n      throw new YError('Too many arguments provided. Expected max ' + totalCommands +\n        ' but received ' + length + '.')\n    }\n\n    parsed.demanded.forEach(function (demanded) {\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = demanded.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)\n      position += 1\n    })\n\n    parsed.optional.forEach(function (optional) {\n      if (args.length === 0) return\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = optional.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)\n      position += 1\n    })\n  } catch (err) {\n    console.warn(err.stack)\n  }\n}\n\nfunction guessType (arg) {\n  if (Array.isArray(arg)) {\n    return 'array'\n  } else if (arg === null) {\n    return 'null'\n  }\n  return typeof arg\n}\n\nfunction argumentTypeError (observedType, allowedTypes, position, optional) {\n  throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument.' +\n    ' Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.')\n}\n"]}