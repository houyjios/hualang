{"version":3,"sources":["../sass-graph/node_modules/yargs/node_modules/read-pkg-up/node_modules/read-pkg/node_modules/load-json-file/node_modules/strip-bom/node_modules/is-utf8/is-utf8.js"],"names":[],"mappings":";;AACA,UAAU,OAAO,OAAP,GAAiB,UAAS,KAAT,EAC3B;AACI,QAAI,IAAI,CAAR;AACA,WAAM,IAAI,MAAM,MAAhB,EACA;AACI,aAAS;AACG,cAAM,CAAN,KAAY,IAAZ,IACA,MAAM,CAAN,KAAY,IADZ,IAEA,MAAM,CAAN,KAAY,IAFZ,IAGC,QAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAJ7C,EAMI;AACE,iBAAK,CAAL;AACA;AACH;;AAEH,aAAS;AACI,gBAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAjC,IACC,QAAQ,MAAM,IAAE,CAAR,CAAR,IAAsB,MAAM,IAAE,CAAR,KAAc,IAFjD,EAII;AACE,iBAAK,CAAL;AACA;AACH;;AAEH,YAAQ,CAAC;AACG,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IADzC,IAEC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAH7C,IAKC;AACA,SAAE,QAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAjC,IACA,MAAM,CAAN,KAAY,IADZ,IAEA,MAAM,CAAN,KAAY,IAFb,KAGC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAE,CAAR,KAAc,IAHvC,IAIC,QAAQ,MAAM,IAAE,CAAR,CAAR,IAAsB,MAAM,IAAE,CAAR,KAAc,IAVtC,IAYC;AACA,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAE,CAAR,CAAR,IAAsB,MAAM,IAAE,CAAR,KAAc,IADrC,IAEC,QAAQ,MAAM,IAAE,CAAR,CAAR,IAAsB,MAAM,IAAE,CAAR,KAAc,IAf9C,EAiBI;AACE,iBAAK,CAAL;AACA;AACH;;AAEH,YAAQ,CAAC;AACG,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IADzC,IAEC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAFzC,IAGC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAJ7C,IAMC;AACC,gBAAQ,MAAM,CAAN,CAAR,IAAoB,MAAM,CAAN,KAAY,IAAjC,IACC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IADzC,IAEC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAFzC,IAGC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAV1C,IAYC;AACA,cAAM,CAAN,KAAY,IAAZ,IACC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IADzC,IAEC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAFzC,IAGC,QAAQ,MAAM,IAAI,CAAV,CAAR,IAAwB,MAAM,IAAI,CAAV,KAAgB,IAhBlD,EAkBI;AACE,iBAAK,CAAL;AACA;AACH;;AAEH,eAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH,CA1ED","file":"is-utf8-compiled.js","sourcesContent":["\nexports = module.exports = function(bytes)\n{\n    var i = 0;\n    while(i < bytes.length)\n    {\n        if(     (// ASCII\n                    bytes[i] == 0x09 ||\n                    bytes[i] == 0x0A ||\n                    bytes[i] == 0x0D ||\n                    (0x20 <= bytes[i] && bytes[i] <= 0x7E)\n                )\n          ) {\n              i += 1;\n              continue;\n          }\n\n        if(     (// non-overlong 2-byte\n                    (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&\n                    (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)\n                )\n          ) {\n              i += 2;\n              continue;\n          }\n\n        if(     (// excluding overlongs\n                    bytes[i] == 0xE0 &&\n                    (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n                ) ||\n                (// straight 3-byte\n                 ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||\n                  bytes[i] == 0xEE ||\n                  bytes[i] == 0xEF) &&\n                 (0x80 <= bytes[i + 1] && bytes[i+1] <= 0xBF) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                ) ||\n                (// excluding surrogates\n                 bytes[i] == 0xED &&\n                 (0x80 <= bytes[i+1] && bytes[i+1] <= 0x9F) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                )\n          ) {\n              i += 3;\n              continue;\n          }\n\n        if(     (// planes 1-3\n                    bytes[i] == 0xF0 &&\n                    (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                    (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// planes 4-15\n                 (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// plane 16\n                 bytes[i] == 0xF4 &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                )\n          ) {\n              i += 4;\n              continue;\n          }\n\n        return false;\n    }\n\n    return true;\n}\n"]}